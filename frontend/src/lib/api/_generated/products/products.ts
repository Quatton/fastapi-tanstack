/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI Backend
 * Backend API for FastAPI-Tanstack project
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CreateProductRequest,
  CreateProductResponse,
  HTTPValidationError,
  ListProductsResponse,
  ListProductsV1ProductsGetParams,
} from ".././";

/**
 * Get all products.
 * @summary List Products
 */
export const listProductsV1ProductsGet = (
  params?: ListProductsV1ProductsGetParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListProductsResponse>> => {
  return axios.default.get(`http://localhost:8000/v1/products/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getListProductsV1ProductsGetQueryKey = (params?: ListProductsV1ProductsGetParams) => {
  return [`http://localhost:8000/v1/products/`, ...(params ? [params] : [])] as const;
};

export const getListProductsV1ProductsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListProductsV1ProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListProductsV1ProductsGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listProductsV1ProductsGet>>> = ({
    signal,
  }) => listProductsV1ProductsGet(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListProductsV1ProductsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listProductsV1ProductsGet>>
>;
export type ListProductsV1ProductsGetQueryError = AxiosError<HTTPValidationError>;

export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params: undefined | ListProductsV1ProductsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
          TError,
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListProductsV1ProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
          TError,
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListProductsV1ProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List Products
 */

export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<HTTPValidationError>,
>(
  params?: ListProductsV1ProductsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListProductsV1ProductsGetQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new product.
 * @summary Create Product
 */
export const createProductV1ProductsPost = (
  createProductRequest: CreateProductRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CreateProductResponse>> => {
  return axios.default.post(`http://localhost:8000/v1/products/`, createProductRequest, options);
};

export const getCreateProductV1ProductsPostMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createProductV1ProductsPost>>,
    TError,
    { data: CreateProductRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createProductV1ProductsPost>>,
  TError,
  { data: CreateProductRequest },
  TContext
> => {
  const mutationKey = ["createProductV1ProductsPost"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createProductV1ProductsPost>>,
    { data: CreateProductRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createProductV1ProductsPost(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateProductV1ProductsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createProductV1ProductsPost>>
>;
export type CreateProductV1ProductsPostMutationBody = CreateProductRequest;
export type CreateProductV1ProductsPostMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Create Product
 */
export const useCreateProductV1ProductsPost = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createProductV1ProductsPost>>,
      TError,
      { data: CreateProductRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createProductV1ProductsPost>>,
  TError,
  { data: CreateProductRequest },
  TContext
> => {
  const mutationOptions = getCreateProductV1ProductsPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
