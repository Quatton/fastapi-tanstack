/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI Backend
 * Backend API for FastAPI-Tanstack project
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { CreateProductResponse, ListProductsResponse } from ".././";

export const getListProductsV1ProductsGetResponseMock = (
  overrideResponse: Partial<ListProductsResponse> = {}
): ListProductsResponse => ({
  total: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  page: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  page_size: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
  products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.string.uuid(),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      price: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    })
  ),
  ...overrideResponse,
});

export const getCreateProductV1ProductsPostResponseMock = (
  overrideResponse: Partial<CreateProductResponse> = {}
): CreateProductResponse => ({
  id: faker.string.uuid(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  description: faker.string.alpha({ length: { min: 10, max: 20 } }),
  price: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  ...overrideResponse,
});

export const getListProductsV1ProductsGetMockHandler = (
  overrideResponse?:
    | ListProductsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ListProductsResponse> | ListProductsResponse)
) => {
  return http.get("*/v1/products/", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListProductsV1ProductsGetResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getCreateProductV1ProductsPostMockHandler = (
  overrideResponse?:
    | CreateProductResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<CreateProductResponse> | CreateProductResponse)
) => {
  return http.post("*/v1/products/", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateProductV1ProductsPostResponseMock()
      ),
      { status: 201, headers: { "Content-Type": "application/json" } }
    );
  });
};
export const getProductsMock = () => [
  getListProductsV1ProductsGetMockHandler(),
  getCreateProductV1ProductsPostMockHandler(),
];
