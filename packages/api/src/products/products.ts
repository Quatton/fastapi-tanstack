/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI Backend
 * Backend API for FastAPI-Tanstack project
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type { ListProductsResponse } from ".././";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Get all products.
 * @summary List Products
 */
export const listProductsV1ProductsGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ListProductsResponse>> => {
  return axios.get(`/v1/products/`, options);
};

export const getListProductsV1ProductsGetQueryKey = () => {
  return [`/v1/products/`] as const;
};

export const getListProductsV1ProductsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListProductsV1ProductsGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listProductsV1ProductsGet>>> = ({
    signal,
  }) => listProductsV1ProductsGet({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListProductsV1ProductsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listProductsV1ProductsGet>>
>;
export type ListProductsV1ProductsGetQueryError = AxiosError<unknown>;

export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
          TError,
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
          TError,
          Awaited<ReturnType<typeof listProductsV1ProductsGet>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List Products
 */

export function useListProductsV1ProductsGet<
  TData = Awaited<ReturnType<typeof listProductsV1ProductsGet>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listProductsV1ProductsGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListProductsV1ProductsGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
